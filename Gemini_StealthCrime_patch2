diff --git a/Gemini_StealthCrime.js b/Gemini_StealthCrime.js
--- a/Gemini_StealthCrime.js
+++ b/Gemini_StealthCrime.js
@@ -498,7 +498,7 @@
   $gameParty.markStolen(kind, item.id, amount);
 
-  // witness (LOS or hearing)
-  if (!enableLOS) return;
+  // witness (LOS or hearing) â€” allow hearing-only if LOS is disabled
+  if (!enableLOS && !enableHearing) return;
   const px=$gamePlayer.x, py=$gamePlayer.y;
   const nowF=Graphics.frameCount;
   for (const ev of $gameMap.events()){
@@ -713,7 +713,9 @@
   }
 
-  if (!enableContraband || !enableLOS) return;
+  // Allow hearing-only scans even if LOS is disabled
+  if (!enableContraband) return;
+  if (!enableLOS && !enableHearing) return;
 
   const px=$gamePlayer.x, py=$gamePlayer.y;
   const nowF = Graphics.frameCount;
@@ -1006,6 +1008,29 @@
   return sum;
 }
 
+// Convert ALL evidence to gold (shared by scene + command)
+function evidenceConvertAll(){
+  if (!enableEvidenceSell) return 0;
+  let gold=0;
+  function drain(db, kind){
+    const bag = $gameSystem._scEvidence[TYPES[kind]];
+    for (const id in bag){
+      const n = stashTake(kind, Number(id), bag[id]|0);
+      if (n>0){
+        const obj = db[Number(id)];
+        gold += Math.floor((obj?.price||0)*n * (evidenceSellPercent/100));
+      }
+    }
+  }
+  drain($dataItems,'item');
+  drain($dataWeapons,'weapon');
+  drain($dataArmors,'armor');
+  if (gold>0){
+    $gameParty.gainGold(gold);
+    addToast(`Evidence converted: +${gold}g`);
+  }
+  return gold;
+}
 //-----------------------------------------------------------------------------
 // Fence (UI)
 //-----------------------------------------------------------------------------
@@ -1232,18 +1257,12 @@
   if (ret>0) addToast(`Evidence returned: ${ret}`);
 }
 Scene_Evidence.prototype.convertAll = function(){
-  if (!enableEvidenceSell) return;
-  let gold=0;
-  function drain(db, kind){
-    const bag = $gameSystem._scEvidence[TYPES[kind]];
-    for (const id in bag){
-      const n = stashTake(kind, Number(id), bag[id]|0);
-      if (n>0){ const obj=db[Number(id)]; gold += Math.floor((obj?.price||0)*n * (evidenceSellPercent/100)); }
-    }
-  }
-  drain($dataItems,'item'); drain($dataWeapons,'weapon'); drain($dataArmors,'armor');
-  if (gold>0){ $gameParty.gainGold(gold); addToast(`Evidence converted: +${gold}g`); }
-  this._list.refresh();
+  const gold = evidenceConvertAll();
+  if (this._list) this._list.refresh();
 };
 
 //-----------------------------------------------------------------------------
 // Plugin commands
@@ -1271,7 +1290,7 @@
 });
 PluginManager.registerCommand(PLUGIN, 'OpenEvidence', ()=> SceneManager.push(Scene_Evidence));
 PluginManager.registerCommand(PLUGIN, 'ReturnEvidenceAll', ()=> evidenceReturnAll());
-PluginManager.registerCommand(PLUGIN, 'EvidenceConvertAll', ()=> { if (enableEvidenceSell) { const sc = new Scene_Evidence(); } });
+PluginManager.registerCommand(PLUGIN, 'EvidenceConvertAll', ()=> { evidenceConvertAll(); });
 
 PluginManager.registerCommand(PLUGIN, 'GrantScannerWaiver', args=>{
   const auth=S(args.authority||dScannerAuthority);
